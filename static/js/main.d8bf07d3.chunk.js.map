{"version":3,"sources":["LetterFrequencies.ts","views/CharacterCountsView.tsx","views/SubstitutionCipherView.tsx","views/TextAreaView.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["LetterFrequencies","letter","percent","sort","a","b","CharacterCountsView","props","frequencies","text","counts","toUpperCase","c","count","ret","push","letters","reduce","n","x","map","countCharacters","colSpan","i","toFixed","ALPHABET","split","SubstitutionCipherView","cipher","setCodeLetter","reset","seen","getCodeLetter","CodeLetter","conflict","length","code","onChange","newX","type","className","onClick","htmlClass","value","event","target","maxLength","size","TextAreaView","label","disableAutoCorrect","changeText","ac","sc","autoComplete","autoCorrect","autoCapitalize","spellCheck","rows","initializeModel","mode","plainText","cipherText","updateModel","model","action","newModel","apply","console","log","AppState","data","dispatchUpdate","this","Reset","s","maybeAutoEncrypt","UpdatePlainText","maybeAutoDecrypt","UpdateCipherText","plain","maybeAuto","SetSubstitution","Encrypt","Decrypt","SetMode","autoDecrypt","MultiAction","autoEncrypt","actions","newPlainText","newCipherText","substitute","reverseCode","Object","entries","mapping","toLowerCase","join","App","useReducer","state","sendModelMsg","appState","updatePlainText","disabled","manual","decrypt","encrypt","classNames","active","setMode","updateCipherText","JSON","stringify","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d8bf07d3.chunk.js","sourcesContent":["const LetterFrequencies = [\n  { letter: 'E', percent: 11.1607 },\n  { letter: 'M', percent: 3.0129 },\n  { letter: 'A', percent: 8.4966 },\n  { letter: 'H', percent: 3.0034 },\n  { letter: 'R', percent: 7.5809 },\n  { letter: 'G', percent: 2.4705 },\n  { letter: 'I', percent: 7.5448 },\n  { letter: 'B', percent: 2.072 },\n  { letter: 'O', percent: 7.1635 },\n  { letter: 'F', percent: 1.8121 },\n  { letter: 'T', percent: 6.9509 },\n  { letter: 'Y', percent: 1.7779 },\n  { letter: 'N', percent: 6.6544 },\n  { letter: 'W', percent: 1.2899 },\n  { letter: 'S', percent: 5.7351 },\n  { letter: 'K', percent: 1.1016 },\n  { letter: 'L', percent: 5.4893 },\n  { letter: 'V', percent: 1.0074 },\n  { letter: 'C', percent: 4.5388 },\n  { letter: 'X', percent: 0.2902 },\n  { letter: 'U', percent: 3.6308 },\n  { letter: 'Z', percent: 0.2722 },\n  { letter: 'D', percent: 3.3844 },\n  { letter: 'J', percent: 0.1965 },\n  { letter: 'P', percent: 3.1671 },\n  { letter: 'Q', percent: 0.1962 },\n]\nLetterFrequencies.sort((a, b) => b.percent - a.percent)\nexport default LetterFrequencies\n","import LetterFrequencies from '../LetterFrequencies'\n\ninterface Props {\n  text: string\n}\n\nfunction countCharacters(text: string) {\n  const counts = {} as { [key: string]: { letter: string; count: number } }\n  for (const c of text.toUpperCase()) {\n    if (!counts[c]) {\n      counts[c] = { letter: c, count: 1 }\n    } else {\n      counts[c].count++\n    }\n  }\n  const ret = []\n  for (const c of 'ABCDEFGHIJKLMNOPQRSTUVWXYZ') {\n    ret.push(counts[c] || { letter: c, count: 0, percent: 0 })\n  }\n  const letters = ret.reduce((n, x) => n + x.count, 0)\n  ret.sort((a, b) => b.count - a.count)\n  return ret.map((x) => ({ percent: (100 * x.count) / letters, ...x }))\n}\n\nexport default function CharacterCountsView(props: Props) {\n  const frequencies = countCharacters(props.text)\n  return (\n    <div>\n      <table>\n        <thead>\n          <tr>\n            <th colSpan={2}>Common letters</th>\n            <th colSpan={3}>Letters in message</th>\n          </tr>\n        </thead>\n        <tbody>\n          {frequencies.map((x, i) => (\n            <tr key={i}>\n              <td>{LetterFrequencies[i].letter}</td>\n              <td>{LetterFrequencies[i].percent.toFixed(1)}%</td>\n              <td>{x.letter}</td>\n              <td>{x.count}</td>\n              <td>{x.percent.toFixed(1)}%</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  )\n}\n","import './SubstitutionCipherView.css'\n\nconst ALPHABET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('')\n\ninterface Cipher {\n  getCodeLetter(plain: string): string\n}\n\ninterface Props {\n  cipher: Cipher\n  setCodeLetter: (plain: string, code: string) => void\n  reset: () => void\n}\n\nexport default function SubstitutionCipherView(props: Props) {\n  const { cipher, setCodeLetter, reset } = props\n  const seen = {} as { [key: string]: number }\n  for (const c of ALPHABET) {\n    const x = cipher.getCodeLetter(c)\n    if (seen[x]) {\n      seen[x]++\n    } else {\n      seen[x] = 1\n    }\n  }\n  return (\n    <table>\n      <tbody>\n        <tr>\n          <th>plain</th>\n          {ALPHABET.map((c) => (\n            <td key={c}>{c}</td>\n          ))}\n        </tr>\n        <tr>\n          <th>code</th>\n          {ALPHABET.map((c) => [c, cipher.getCodeLetter(c)]).map(([c, x]) => (\n            <td key={c}>\n              <CodeLetter\n                conflict={x.length > 0 && seen[x] ? seen[x] > 1 : false}\n                code={x}\n                onChange={(newX) => setCodeLetter(c, newX)}\n              />\n            </td>\n          ))}\n          <td>\n            <button type=\"button\" className=\"btn btn-danger\" onClick={reset}>\n              reset\n            </button>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  )\n}\n\nfunction CodeLetter(props: {\n  conflict: boolean\n  code: string\n  onChange: (newCode: string) => void\n}) {\n  const { conflict, code, onChange } = props\n  const htmlClass = `form-control ${conflict ? 'is-invalid' : ''} substitution`\n  return (\n    <input\n      className={htmlClass}\n      type=\"text\"\n      value={code}\n      onChange={(event) => onChange(event.target.value)}\n      maxLength={1}\n      size={1}\n    />\n  )\n}\n","type Props = {\n  label: string\n  disableAutoCorrect?: boolean\n  text: string\n  changeText: (s: string) => void\n}\n\nexport default function TextAreaView(props: Props) {\n  const { label, disableAutoCorrect, text, changeText } = props\n  const ac = disableAutoCorrect ? 'off' : 'on'\n  const sc = disableAutoCorrect ? 'false' : 'true'\n  return (\n    <div>\n      <b>{label}</b>\n      <textarea\n        autoComplete={ac}\n        autoCorrect={ac}\n        autoCapitalize={ac}\n        spellCheck={sc}\n        className=\"form-control\"\n        onChange={(event) => changeText(event.target.value)}\n        rows={5}\n        value={text}\n      />\n    </div>\n  )\n}\n","import CharacterCountsView from './views/CharacterCountsView'\nimport SubstitutionCipherView from './views/SubstitutionCipherView'\nimport TextAreaView from './views/TextAreaView'\nimport classNames from 'classnames'\nimport React, { useReducer } from 'react'\n\ninterface State {\n  mode: 'MANUAL' | 'AUTODECRYPT' | 'AUTOENCRYPT'\n  plainText: string\n  cipherText: string\n  code: { [key: string]: string }\n}\n\ninterface Action {\n  apply(state: State): State\n}\n\nfunction initializeModel(): State {\n  return { mode: 'MANUAL', plainText: '', cipherText: '', code: {} }\n}\n\nfunction updateModel(model: State, action: Action) {\n  const newModel = action.apply(model)\n  console.log(newModel)\n  return newModel\n}\n\nclass AppState {\n  data: State\n  dispatchUpdate: React.Dispatch<Action>\n\n  constructor(data: State, dispatchUpdate: React.Dispatch<Action>) {\n    this.data = data\n    this.dispatchUpdate = dispatchUpdate\n  }\n\n  get reset(): () => void {\n    return () => this.dispatchUpdate(new Reset())\n  }\n\n  get plainText(): string {\n    return this.data.plainText\n  }\n\n  get updatePlainText(): (s: string) => void {\n    return (s) => {\n      this.dispatchUpdate(this.maybeAutoEncrypt(new UpdatePlainText(s)))\n    }\n  }\n\n  get cipherText(): string {\n    return this.data.cipherText\n  }\n\n  get updateCipherText(): (s: string) => void {\n    return (s) => {\n      this.dispatchUpdate(this.maybeAutoDecrypt(new UpdateCipherText(s)))\n    }\n  }\n\n  getCodeLetter(plain: string): string {\n    const code = this.data.code[plain]\n    return code || ''\n  }\n\n  get setCodeLetter(): (plain: string, code: string) => void {\n    return (plain, code) => {\n      this.dispatchUpdate(this.maybeAuto(new SetSubstitution(plain, code)))\n    }\n  }\n\n  get encrypt(): () => void {\n    return () => this.dispatchUpdate(new Encrypt())\n  }\n\n  get decrypt(): () => void {\n    return () => this.dispatchUpdate(new Decrypt())\n  }\n\n  get manual(): boolean {\n    return this.data.mode === 'MANUAL'\n  }\n\n  get autoEncrypt(): boolean {\n    return this.data.mode === 'AUTOENCRYPT'\n  }\n\n  get autoDecrypt(): boolean {\n    return this.data.mode === 'AUTODECRYPT'\n  }\n\n  setMode(mode: 'MANUAL' | 'AUTOENCRYPT' | 'AUTODECRYPT'): () => void {\n    return () => this.dispatchUpdate(new SetMode(mode))\n  }\n\n  private maybeAuto(action: Action): Action {\n    return this.maybeAutoEncrypt(this.maybeAutoDecrypt(action))\n  }\n\n  private maybeAutoDecrypt(action: Action): Action {\n    if (this.autoDecrypt) {\n      return new MultiAction(action, new Decrypt())\n    }\n    return action\n  }\n\n  private maybeAutoEncrypt(action: Action): Action {\n    if (this.autoEncrypt) {\n      return new MultiAction(action, new Encrypt())\n    }\n    return action\n  }\n}\n\nclass MultiAction {\n  actions: Action[]\n  constructor(...actions: Action[]) {\n    this.actions = actions\n  }\n  apply(data: State): State {\n    return this.actions.reduce((data, action) => action.apply(data), data)\n  }\n}\n\nclass Reset {\n  apply(data: State): State {\n    return { ...data, mode: 'MANUAL', code: {} }\n  }\n}\n\nclass UpdatePlainText {\n  newPlainText: string\n  constructor(newPlainText: string) {\n    this.newPlainText = newPlainText\n  }\n  apply(data: State): State {\n    return { ...data, plainText: this.newPlainText }\n  }\n}\n\nclass UpdateCipherText {\n  newCipherText: string\n  constructor(newCipherText: string) {\n    this.newCipherText = newCipherText\n  }\n  apply(data: State): State {\n    return { ...data, cipherText: this.newCipherText }\n  }\n}\n\nclass SetSubstitution {\n  plain: string\n  code: string\n  constructor(plain: string, code: string) {\n    this.plain = plain.toUpperCase()\n    this.code = code.toUpperCase()\n  }\n  apply(data: State): State {\n    const code = { ...data.code }\n    if (this.code === '') {\n      delete code[this.plain]\n    } else {\n      code[this.plain] = this.code\n    }\n    return { ...data, code }\n  }\n}\n\nclass Encrypt {\n  apply(data: State): State {\n    const cipherText = substitute(data.plainText, data.code)\n    return { ...data, cipherText }\n  }\n}\n\nclass Decrypt {\n  apply(data: State): State {\n    const reverseCode = {} as { [key: string]: string }\n    for (const [plain, code] of Object.entries(data.code)) {\n      reverseCode[code] = plain\n    }\n    const plainText = substitute(data.cipherText, reverseCode)\n    return { ...data, plainText }\n  }\n}\n\nclass SetMode {\n  mode: 'MANUAL' | 'AUTOENCRYPT' | 'AUTODECRYPT'\n  constructor(mode: 'MANUAL' | 'AUTOENCRYPT' | 'AUTODECRYPT') {\n    this.mode = mode\n  }\n  apply(data: State): State {\n    return { ...data, mode: this.mode }\n  }\n}\n\nfunction substitute(text: string, mapping: { [key: string]: string }) {\n  const chars = text.split('')\n  const mappedChars = chars.map(\n    (c) => mapping[c.toUpperCase()] || c.toLowerCase()\n  )\n  return mappedChars.join('')\n}\n\nfunction App() {\n  const [state, sendModelMsg] = useReducer(updateModel, null, initializeModel)\n  const appState = new AppState(state, sendModelMsg)\n\n  return (\n    <div className=\"container\">\n      <div className=\"row\">\n        <div className=\"col-sm-12\">\n          <SubstitutionCipherView\n            cipher={appState}\n            setCodeLetter={appState.setCodeLetter}\n            reset={appState.reset}\n          />\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col-sm-5\">\n          <TextAreaView\n            label=\"Plain text\"\n            text={appState.plainText}\n            changeText={appState.updatePlainText}\n          />\n        </div>\n        <div className=\"col-sm-2\">\n          <br />\n          <button\n            type=\"button\"\n            className=\"btn btn-primary\"\n            disabled={!appState.manual}\n            onClick={appState.decrypt}>\n            &larr; Decrypt\n          </button>\n          <br />\n          <br />\n          <button\n            type=\"button\"\n            className=\"btn btn-primary\"\n            disabled={!appState.manual}\n            onClick={appState.encrypt}>\n            Encrypt &rarr;\n          </button>\n          <br />\n          <br />\n          <div className=\"btn-group\">\n            <button\n              type=\"button\"\n              className={classNames('btn', 'btn-primary', {\n                active: appState.manual,\n              })}\n              onClick={appState.setMode('MANUAL')}>\n              manual\n            </button>\n            <button\n              type=\"button\"\n              className={classNames('btn', 'btn-primary', {\n                active: appState.autoEncrypt,\n              })}\n              onClick={appState.setMode('AUTOENCRYPT')}>\n              encrypt\n            </button>\n            <button\n              type=\"button\"\n              className={classNames('btn', 'btn-primary', {\n                active: appState.autoDecrypt,\n              })}\n              onClick={appState.setMode('AUTODECRYPT')}>\n              decrypt\n            </button>\n          </div>\n        </div>\n        <div className=\"col-sm-5\">\n          <TextAreaView\n            label=\"Cipher text\"\n            text={appState.cipherText}\n            changeText={appState.updateCipherText}\n            disableAutoCorrect={true}\n          />\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col-sm-12\">\n          <CharacterCountsView text={appState.cipherText} />\n        </div>\n      </div>\n      <div className=\"row\">\n        <pre>{JSON.stringify(appState.data, null, ' ')}</pre>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import App from './App'\nimport './index.css'\nimport reportWebVitals from './reportWebVitals'\nimport 'bootstrap/dist/css/bootstrap.css'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}